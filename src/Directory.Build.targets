<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- ################################################################
	               TASKS TO PERFORM AT BUILD 
	     ################################################################ 	-->
  <!-- "Recursively" override BuildDependsOn including a couple of tasks before/after the "normal" VS/C# build   -->

  <!-- Main build -->
  <PropertyGroup>
    <BuildDependsOn>
      FuseeBeforeBuild;
      FuseeReferenceCompilePixelShaders;
      FuseeReferenceCompileVertexShaders;
      $(BuildDependsOn);

      FuseeCollectAndCopyAssets;
      FuseeResolveAssetDependencies;

      FuseeJSILCompile;
      FuseeCopyJSILJavaScript;
      FuseeCopyExternalJavaScript;
      FuseeResolveJavaScriptDependencies;
      FuseeCopyWebAssetsStylesNHtml;
      FuseeWebTools;
      FuseeCopyNativeLibrary;
      FuseeResolveNativeDependencies
    </BuildDependsOn>
  </PropertyGroup>

  <!-- Android build additions -->
  <PropertyGroup>
    <ApplicationResolveReferencesDependsOn>
      FuseeBeforeAndroidResRef;
      $(ApplicationResolveReferencesDependsOn)
      FuseeAfterAndroidResRef;
    </ApplicationResolveReferencesDependsOn>
  </PropertyGroup>

  <!-- Clean -->
  <PropertyGroup>
    <CleanDependsOn>
      FuseeCleanNativeDependencies;
      FuseeCleanNativeLibrary;
      FuseeCleanAssets;
      FuseeJSILClean;
      FuseeCleanDependingJavaScript;
      FuseeCleanExternalJavaScript;
      $(CleanDependsOn);
    </CleanDependsOn>
  </PropertyGroup>

  <!-- ########################################################################################################
	                                       EXTERNAL ASSET MANAGEMENT
	     ######################################################################################################## 	-->

  <!-- define a destination where the dependent Assets should go. 
        1. LIBRARY: bin\Debug\Libraries\"<dll-name>.Scripts"  - those folders contain all recursively collected assets from referenced dlls
        2. WEB Project: $(OutputPath)Assets\ - for WEB projects $(OutputPath) is the "<dll-name>" folder under temp\Obj.
           The Assets will later be copied to $(WebOutputPaath), target: "FuseeCopyWebAssetsStylesNHtml".
        3. DESKTOP Project: $(OutputPath)Assets\
        4. ANDROID Projects: Handled in target "FuseeBeforeAndroidResRef"
    -->
  <PropertyGroup>
    <!--LIBRARY-->
    <AssetDestinationFolder Condition=" '$(OutputType)' == 'Library' And '$(FuseeWebOutputPath)' == '' ">$(OutputPath)$(AssemblyName).Assets\</AssetDestinationFolder>
    <!--WEB-->
    <AssetDestinationFolder Condition=" '$(FuseeWebOutputPath)' != '' ">$(OutputPath)Assets\</AssetDestinationFolder>
    <!--DESKTOP-->
    <AssetDestinationFolder Condition="  $(AssemblyName.Contains('Desktop')) And '$(OutputType)' != 'Library'">$(OutputPath)Assets\</AssetDestinationFolder>
  </PropertyGroup>


  <!-- ########################################################################################################
	                                       TASKS TO PERFORM DURING MAIN BUILD
	     ######################################################################################################## 	-->

  <!-- Add FUSEE targets/tasks to be performed BEFORE the normal build here -->
  <Target Name="FuseeBeforeBuild">
    <!--  -->
  </Target>

  <!--  Calls the Khronos group's validating GLSL shader compiler ("glslangValidator.exe") on all items in 
        either item list "FuseeVertexShaderSource" or "FuseePixelShaderSource". Quite some effort is done on 
        re-arranging any error to match the Visual Studio double-click-on-error feature. Unfortunately the
        Error task misbehaves as it 1. doesn't allow to specify a line number and 2. Propagates any line
        number passed to the file name string erroneously. As a result, the error is not Double-Clickable
        in Visual Studio's Error List but only in the text-based Output window.
    -->
  <Target Name="FuseeReferenceCompilePixelShaders"
          DependsOnTargets="FuseeEnumerateShaderSources"
          Inputs="@(FuseePixelShaderSource)"
          Outputs="$(TargetPath)">
    <Message Importance="High" Text="[pixel shader validation] %(FuseePixelShaderSource.FullPath)" />
    <Exec ContinueOnError="false" Timeout="120000" Command='"$(FuseeBuildRoot)\ext\glslangValidator\glslangValidator.exe" "%(FuseePixelShaderSource.FullPath)" '  ConsoleToMSBuild="true" IgnoreExitCode='true'>
      <Output TaskParameter="ConsoleOutput" PropertyName="ValidationResultString" />
      <Output TaskParameter="ExitCode" PropertyName="ErrCode"/>
    </Exec>
    <PropertyGroup>
      <!-- Find everything from the beginning of the line until (and including) '.frag' -->
      <ErrFile>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `^.*\.frag`))</ErrFile>
      <!-- From the pattern 'col:line' take the first number before the colon -->
      <ErrCol>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `[0-9]+(?=\:[0-9]+)`))</ErrCol>
      <!-- From the pattern 'col:line' take the second number after the colon -->
      <ErrLine>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `(?&lt;=[0-9]+\:)[0-9]+`))</ErrLine>
      <!-- Take everything between (and excluding) 'col:line:' and the semicolon -->
      <ErrMsg>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `(?&lt;=[0-9]+\:[0-9]+\:).*(?=;)`))</ErrMsg>
    </PropertyGroup>

    <!-- Message Importance="High" Text="$(ErrFile)($(ErrLine),$(ErrCol)):$(ErrMsg)   - Code: $(ErrCode) [pixel shader result] " / -->
    <!-- Oh my god - The Error Task doesn't allow to set line numbers-->
    <Error Condition=" '$(ErrCode)' != '0' " File="$(ErrFile)($(ErrLine),$(ErrCol))" Code="$(ErrCode)" Text="$(ErrMsg) [pixel shader validation result] DOUBLE-CLICK IN OUTPUT WINDOW"/>
  </Target>

  <Target Name="FuseeReferenceCompileVertexShaders"
			    DependsOnTargets="FuseeEnumerateShaderSources"
			    Inputs="@(FuseeVertexShaderSource)"
			    Outputs="$(TargetPath)">
    <Message Importance="High" Text="[vertex shader validation] %(FuseeVertexShaderSource.FullPath)" />
    <Exec ContinueOnError="false" Timeout="120000" Command='"$(FuseeBuildRoot)\ext\glslangValidator\glslangValidator.exe" "%(FuseeVertexShaderSource.FullPath)" '  ConsoleToMSBuild="true" IgnoreExitCode='true'>
      <Output TaskParameter="ConsoleOutput" PropertyName="ValidationResultString" />
      <Output TaskParameter="ExitCode" PropertyName="ErrCode"/>
    </Exec>
    <PropertyGroup>
      <!-- Find everything from the beginning of the line until (and including) '.vert' -->
      <ErrFile>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `^.*\.vert`))</ErrFile>
      <!-- From the pattern 'col:line' take the first number before the colon -->
      <ErrCol>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `[0-9]+(?=\:[0-9]+)`))</ErrCol>
      <!-- From the pattern 'col:line' take the second number after the colon -->
      <ErrLine>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `(?&lt;=[0-9]+\:)[0-9]+`))</ErrLine>
      <!-- Take everything between (and excluding) 'col:line:' and the semicolon -->
      <ErrMsg>$([System.Text.RegularExpressions.Regex]::Match($(ValidationResultString), `(?&lt;=[0-9]+\:[0-9]+\:).*(?=;)`))</ErrMsg>
    </PropertyGroup>

    <!-- Message Importance="High" Text="$(ErrFile)($(ErrLine),$(ErrCol)):$(ErrMsg)   - Code: $(ErrCode) [vertex shader result] " / -->
    <!-- Oh my god - The Error Task doesn't allow to set line numbers -->
    <Error Condition=" '$(ErrCode)' != '0' " File="$(ErrFile)($(ErrLine),$(ErrCol))" Code="$(ErrCode)" Text="$(ErrMsg) [vertex shader validation result] DOUBLE-CLICK IN OUTPUT WINDOW"/>
  </Target>

  <!--  Takes all files contained in a project marked as "Content" AND with either ".frag" or ".vert" extensions and adds them to 
          the respective item list "FuseeVertexShaderSource" or "FuseePixelShaderSource".
    -->
  <Target Name="FuseeEnumerateShaderSources">
    <!--Message Importance="High" Text="[ßßßß] %(Content.FullPath)" /-->
    <ItemGroup>
      <FuseeVertexShaderSource Condition=" '%(Content.Extension)' == '.vert' " Include="%(Content.FullPath)" />
    </ItemGroup>
    <ItemGroup>
      <FuseePixelShaderSource Condition=" '%(Content.Extension)' == '.frag' " Include="%(Content.FullPath)" />
    </ItemGroup>
  </Target>

  <!--LIBRARIES: Collect and copy Assets from this dll into the AssetDestinationFolder-->
  <Target Name="FuseeCollectAndCopyAssets" Condition="'$(OutputType)' == 'Library' and '$(FuseeWebOutputPath)' == ''">
    <ItemGroup>
      <_CopyAssetsItems Include="$(ProjectDir)Assets\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_CopyAssetsItems)" DestinationFolder="$(AssetDestinationFolder)" />
    <Message Importance="High" Text="[copied asset] @(_CopyAssetsItems) -> $(AssetDestinationFolder)%(Filename)%(Extension)" />
  </Target>

  <!--ALL Projects: Collect and copy Assets from referenced dlls into the AssetDestinationFolder-->
  <Target Name="FuseeResolveAssetDependencies">
    <ItemGroup>
      <FuseeReferencedAssemblies Include="@(ReferencePath)" />
    </ItemGroup>
    <ItemGroup>
      <FuseeAssetDependency Include="%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Assets\*.*"/>
    </ItemGroup>
    <!-- Copy all referenced assets to the "<dll-name>.Scripts" or the Assets.Scripts subfolder of this assembly -->
    <Copy SourceFiles="%(FuseeAssetDependency.FullPath)" DestinationFolder="$(AssetDestinationFolder)" ContinueOnError="true"/>
    <Message Condition="Exists('%(FuseeAssetDependency.FullPath)')" Importance="High" Text="[external asset dependency] %(FuseeAssetDependency.FullPath) -> $(AssetDestinationFolder)%(Filename)%(Extension)" />
  </Target>

  <!-- ================================================================================================================
	Run the JSIL cross compiler on any assembly created from a .csproj where the FuseeWebOutputPath is set.
	-->
  <Target Name="FuseeJSILCompile" Condition=" '$(FuseeWebOutputPath)' != '' ">
    <Message Importance="High" Text="[JSILc x-compile] $(TargetPath)" />
    <Exec ContinueOnError="true" Timeout="120000" Command='"$(FuseeRoot)\ext\JSIL\Compiler\JSILc.exe" -o "$(FuseeWebOutputPath)Assets\Scripts" "$(TargetPath)"' />
  </Target>

  <!-- ================================================================================================================
	Copy the JavaScript files shipped with JSIL (probably modified for FUSEE purposes) to the FuseeWebOutputPath (if set)
	-->
  <Target Name="FuseeCopyJSILJavaScript" Condition=" '$(FuseeWebOutputPath)' != '' ">
    <ItemGroup>
      <FuseeJsilScript Include="$(FuseeRoot)\ext\JSIL\Scripts\**\*.js" />
    </ItemGroup>
    <Copy SourceFiles="%(FuseeJsilScript.FullPath)" DestinationFolder="$(FuseeWebOutputPath)\Assets\Scripts\%(RecursiveDir)" ContinueOnError="true"/>
    <Message Condition="Exists('%(FuseeJsilScript.FullPath)')" Importance="High" Text="[JSIL built-in script] %(FuseeJsilScript.FullPath) -> $(FuseeWebOutputPath)\Assets\Scripts\%(RecursiveDir)%(Filename)%(Extension)" />
  </Target>

  <!-- ================================================================================================================
	FuseeCopyExternalJavaScript: copies items in the "Script"-Folder of an project, if a web-build is defined.
	-->
  <Target Name="FuseeCopyExternalJavaScript" DependsOnTargets="FuseeSetScriptDestination" Condition=" '$(FuseeWebOutputPath)' == '' ">
    <ItemGroup>
      <_CopyScriptsItems Include="$(ProjectDir)Scripts\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_CopyScriptsItems)" DestinationFolder="$(FuseeScriptDestination)" />
    <Message Importance="High" Text="[copied external JavaScript] @(_CopyScriptsItems) -> $(FuseeScriptDestination)%(Filename)%(Extension)" />
  </Target>

  <!-- Helper Task to define the destination directory of script copying tasks. 
	-->
  <Target Name="FuseeSetScriptDestination">
    <!-- define a destination where the dependent scripts should go. If FuseeWebOutputPath is defined, this is a web project and we want the
			 scripts to go into an Assets\Scripts subfolder. If FUseeWebOutputPath is not defined, this project itself is some dll (possibly referencing other dlls).
			 Then the scripts of all depending dlls should go to subfolder called "<dll-name>.Scripts" -->
    <PropertyGroup>
      <FuseeScriptDestination Condition=" '$(FuseeWebOutputPath)' == '' ">$(OutputPath)$(AssemblyName).Scripts\</FuseeScriptDestination>
      <FuseeScriptDestination Condition=" '$(FuseeWebOutputPath)' != '' ">$(FuseeWebOutputPath)Assets\Scripts\</FuseeScriptDestination>
    </PropertyGroup>
    <Message Text="FuseeScriptDestination = $(FuseeScriptDestination)" />
  </Target>

  <!-- ================================================================================================================
	FuseeResolveJavaScriptDependencies: Checks for any referenced managed dll if there is a <dllname>.Scripts folder below Libraries
	containing any JavaScript containing implementation attributed with [JSExternal] in the managed reference.
	If so, copy the contents of the .Scripts folder to the output path.
	NOTE: This is a four-step task. Some of these pre-tasks are re-used in other tasks...
		1. Set the script destination output (FuseeSetScriptDestination)
		2. Get a list of referenced assemblies (FuseeGetReferencedAssemblies)
		3. Generate the list of .js files to copy (FuseeAssembleFuseeJavaScriptDependency) 
		4. Actually copy the files incrementally using Input and Output lists  (FuseeResolveJavaScriptDependencies)
	NOTE: The task is only performed for projects creating a dll OR for projects with the FuseeWebOutputPath set. This keeps
	   output directories for normal .exe files free from unnecessary *.Scripts subfolders
	TODO: expand this to ordinary file references - currently only ProjectReferences are supported. A first try was buggy due to
	%(Reference.Filename) containing NOT the filename but filename+version.
	NOTE: The above TODO seems to be solved by using the @(ReferencePath) list instead of handling @(ProjectReference) and @(Reference) by hand.
	-->
  <Target Name="FuseeResolveJavaScriptDependencies"
	    		DependsOnTargets="FuseeSetScriptDestination;FuseeAssembleFuseeJavaScriptDependency"
			    Inputs="@(FuseeJavaScriptDependency -> %(FuseeJavaScriptDependency.FullPath))"
			    Outputs="@(FuseeJavaScriptDependency -> $(FuseeScriptDestination)%(FuseeJavaScriptDependency.Filename)%(FuseeJavaScriptDependency.Extension))"
			    Condition=" '$(OutputType)' == 'Library' Or '$(FuseeWebOutputPath)' != '' ">
    <!-- Copy all referenced scripts to the "<dll-name>.Scripts" or the Assets.Scripts subfolder of this assembly -->
    <Copy SourceFiles="%(FuseeJavaScriptDependency.FullPath)" DestinationFolder="$(FuseeScriptDestination)" ContinueOnError="true"/>
    <Message Condition="Exists('%(FuseeJavaScriptDependency.FullPath)')" Importance="High" Text="[external JavaScript dependency] %(FuseeJavaScriptDependency.FullPath) -> $(FuseeScriptDestination)%(Filename)%(Extension)" />
  </Target>

  <Target Name="FuseeAssembleFuseeJavaScriptDependency"
          DependsOnTargets="FuseeGetReferencedAssemblies">
    <Message Text="Checking if reference %(ProjectReference.Filename)%(ProjectReference.Extension) has external JavaScript implementations." />
    <Message Importance="High" Condition="Exists('%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Scripts')"
		                                        Text="%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Scripts has external JavaScript implementations." />
    <!-- Now gather all referenced scripts below any (existing) "<referenced-dll-name>.Scripts" subfolder for all referenced projects -->
    <ItemGroup>
      <FuseeJavaScriptDependency  Include="%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Scripts\*.*"/>
    </ItemGroup>
  </Target>

  <Target Name="FuseeGetReferencedAssemblies">
    <!-- FIRST TRY - HANDLES ONLY PROJECT REFERENCES -->
    <!-- Ask the referenced .csproj to reveal the name of the generated output. Undefined $(Platform) (such that (Platform == '') is true) to have the .csproj choose its default platform. 
		 store the result as item(s) under @(FuseeReferencedAssemblies) -->
    <!--MSBuild Projects="@(ProjectReference)" Targets="GetTargetPath" Properties="Configuration=$(Configuration)" RemoveProperties="Platform">
			<Output TaskParameter="TargetOutputs" ItemName="FuseeReferencedAssemblies" />
		</MSBuild -->

    <!-- SECOND TRY - USES @(ReferencePath) -->
    <ItemGroup>
      <FuseeReferencedAssemblies Include="@(ReferencePath)" />
    </ItemGroup>

    <!--Message Importance="High" Text="Referenced Assemblies: %(FuseeReferencedAssemblies.Filename)" /-->
    <!--Message Importance="High" Text="Referenced Assembly: %(Reference.FullPath)" / -->
    <!-- Message Importance="High" Text="Referenced Assembly: %(ReferencePath.Filename)" / -->
  </Target>

  <!-- ================================================================================================================
	Copy the assets and styles and any html (TODO) (everything under "Assets") to the web output for web projects 
	(FuseeWebOutputPath is set)
	-->
  <Target Name="FuseeCopyWebAssetsStylesNHtml" Condition=" '$(FuseeWebOutputPath)' != '' ">
    <!--Collect Assets from \temp\etc.-->
    <ItemGroup>
      <FuseeWebAsset Include="$(OutputPath)Assets\**\*" />
    </ItemGroup>
    <Copy SourceFiles="%(FuseeWebAsset.FullPath)" DestinationFolder="$(FuseeWebOutputPath)\Assets\%(RecursiveDir)" ContinueOnError="true"/>
    <Message Condition="Exists('%(FuseeWebAsset.FullPath)')" Importance="High" Text="[web asset] %(FuseeWebAsset.FullPath) -> $(FuseeWebOutputPath)Assets\%(RecursiveDir)%(Filename)%(Extension)" />
  </Target>

  <!-- ================================================================================================================
	Run the FUSEE web tools generating necessary .js manifests, html file etc. for web projects (FuseeWebOutputPath is set)
  First we need to get the assembly names of the referenced dlls (FuseeGetReferencedAssemblies)
  From there we look into all <dll-name>.Scripts subdirectories and gather the scripts found there
  After that we strip off the directory names. Since the depending JavaScript scripts are copied "recursively" we might
  end up with a list containing a lot of duplicates. So we need to remove duplicate entries (RemoveDuplicates).
	-->
  <Target Name="FuseeWebTools"
			    Condition=" '$(FuseeWebOutputPath)' != '' "
			    DependsOnTargets="FuseeGetReferencedAssemblies">
    <ItemGroup>
      <FuseeScriptAddToManifest Include="$(FuseeRoot)\bin\$(Configuration)\Libraries\%(FuseeReferencedAssemblies.Filename).Scripts\*.*"/>
    </ItemGroup>
    <!-- Message Importance="High" Text="     FuseeScriptAddToManifest: @(FuseeScriptAddToManifest)" /-->
    <ItemGroup>
      <FuseeScriptAddToManifestName Include="@(FuseeScriptAddToManifest->'%(filename)')"/>
    </ItemGroup>
    <!-- Message Importance="High" Text="     FuseeScriptAddToManifestName: @(FuseeScriptAddToManifestName)" / -->
    <RemoveDuplicates
			Inputs="@(FuseeScriptAddToManifestName)">
      <Output
				TaskParameter="Filtered"
				ItemName="FuseeScriptAddToManifestNameFiltered"/>
    </RemoveDuplicates>
    <!-- Message Importance="High" Text="     FuseeScriptAddToManifestNameFiltered: @(FuseeScriptAddToManifestNameFiltered)" / -->
    <PropertyGroup>
      <FuseeScriptListToAdd>@(FuseeScriptAddToManifestNameFiltered)</FuseeScriptListToAdd>
    </PropertyGroup>

    <Copy SourceFiles="$(ProjectDir)$(AssemblyName).html" DestinationFolder="$(FuseeWebOutputPath)" />

    <Message Importance="High" Text="[fusee web tool] Creating default $(AssemblyName).html, $(AssemblyName).contentproj.manifest.js and Config/jsil_config.js "/>
    <Message Importance="High" Text="                 command line: &quot;$(FuseeRoot)\bin\$(Configuration)\Tools\fusee.exe&quot; generate &quot;$(TargetDir)\&quot; &quot;$(FuseeWebOutputPath)\&quot; &quot;$(TargetPath)&quot; &quot;$(FuseeScriptListToAdd)&quot;" />

    <!-- Message Importance="High" Text="     External Scripts to add: @(FuseeScriptAddToManifest->'%(filename)%(extension)')" /-->
    <!-- Message Importance="High" Text="     External Scripts to add: %(FuseeScriptAddToManifest.directory)%(FuseeScriptAddToManifest.filename)%(FuseeScriptAddToManifest.extension)" /-->
    <Exec ContinueOnError="true" Timeout="120000" Command='"$(FuseeRoot)\bin\$(Configuration)\Tools\fusee.exe" generate "$(TargetDir)\" "$(FuseeWebOutputPath)\" "$(TargetPath)" "$(FuseeScriptListToAdd)"' />
  </Target>

  <!-- ================================================================================================================
	FuseeCopyNativeLibrary: Copies files in the Natives folder to a subfolder below the Libraries output (bin) folder. The subfolder
	is named after the Assembly Name of the generated dll/exe file. This way the FuseeResolveNativeDependencies can 
	handle unmanaged dependencies on a per-managed-assembly-level. Similar to FuseeCopyExternalJavaScript.
	-->
  <Target Name="FuseeCopyNativeLibrary"  DependsOnTargets="FuseeSetNativeDestination">
    <ItemGroup>
      <_CopyNativeItems Include="$(ProjectDir)Natives\*.*" />
      <!-- Getting all files that have no Build Action and are linked to the project -->
      <_AllNoneItemsWithLinks Include="@(None->HasMetadata('Link'))" />
      <!-- Going through all those files and checking if the path they are linked to starts with Natives -->
      <_AllNoneItemsWithLinksAndNativesAsPath Include="@(_AllNoneItemsWithLinks)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Link)', '^Natives\\.+'))" />
      <!-- Merge the linked natives with the files in the folder -->
      <_CopyNativeItems Include="@(_AllNoneItemsWithLinksAndNativesAsPath)" />
    </ItemGroup>
    <Copy SourceFiles="@(_CopyNativeItems)" DestinationFolder="$(FuseeNativeDestination)" />
    <Message Importance="High" Text="[native library] @(_CopyNativeItems) -> $(FuseeNativeDestination)%(Filename)%(Extension)" />
  </Target>

  <!-- ================================================================================================================
	FuseeResolveNativeDependencies: Checks for any referenced managed dll if there is a <dllname>.Natives folder below Libraries
	containing any JavaScript containing implementation attributed with [JSExternal] in the managed reference.
	If so, copy the contents of the .Natives folder to the output path.
	NOTE: This is a four-step task. Some of these pre-tasks are re-used in other tasks...
		1. Set the natives destination output (FuseeSetNativeDestination)
		2. Get a list of referenced assemblies (FuseeGetReferencedAssemblies)
		3. Generate the list of .dll files to copy (FuseeAssembleFuseeNativeDependency) 
		4. Actually copy the files incrementally using Input and Output lists (FuseeResolveNativeDependencies)
	TODO: expand this to ordinary file references - currently only ProjectReferences are supported. A first try was buggy due to
	%(Reference.Filename) containing NOT the filename but filename+version.
  -->
  <Target Name="FuseeResolveNativeDependencies"
	    		DependsOnTargets="FuseeSetNativeDestination;FuseeAssembleFuseeNativeDependency"
			    Inputs="@(FuseeNativeDependency -> %(FuseeNativeDependency.FullPath))"
			    Outputs="@(FuseeNativeDependency -> $(FuseeNativeDestination)%(FuseeNativeDependency.Filename)%(FuseeNativeDependency.Extension))">
    <!-- Copy all referenced Natives to the "<dll-name>.Natives" of this assembly -->
    <Copy SourceFiles="%(FuseeNativeDependency.FullPath)" DestinationFolder="$(FuseeNativeDestination)" ContinueOnError="true"/>
    <Message Condition="Exists('%(FuseeNativeDependency.FullPath)')" Importance="High" Text="[external native dependency] %(FuseeNativeDependency.FullPath) -> $(FuseeScriptDestination)%(Filename)%(Extension)" />
  </Target>

  <Target Name="FuseeSetNativeDestination">
    <!-- define a destination where the dependent native dlls should go. If we are creating a library (dll) all indirectly referenced
		     native dlls should go into a <dll-name>.Natives folder. If we are creating an exe all dlls should go directly to the output folder-->
    <PropertyGroup>
      <FuseeNativeDestination Condition=" '$(OutputType)' == 'Library' ">$(OutputPath)$(AssemblyName).Natives\</FuseeNativeDestination>
      <FuseeNativeDestination Condition=" '$(OutputType)' != 'Library' ">$(OutputPath)</FuseeNativeDestination>
    </PropertyGroup>
    <Message Text="FuseeNativeDestination = $(FuseeNativeDestination)" />
  </Target>

  <Target Name="FuseeAssembleFuseeNativeDependency"
			DependsOnTargets="FuseeGetReferencedAssemblies">
    <Message Text="Checking if reference %(ProjectReference.Filename)%(ProjectReference.Extension) references native dlls." />
    <Message Importance="High" Condition="Exists('%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Natives')" Text="%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Natives contains native dlls." />
    <!-- Now gather all referenced Natives below any (existing) "<referenced-dll-name>.Natives" subfolder for all referenced projects -->
    <ItemGroup>
      <FuseeNativeDependency  Include="%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Natives\*.*"/>
    </ItemGroup>
  </Target>

  <!-- ########################################################################################################
	               TASKS TO PERFORM AT ANDROID BUILD STEP  ApplicationResolveReferencesDependsOn
	     ######################################################################################################## 	-->
  <!-- "Recursively" override ApplicationResolveReferencesDependsOn including a couple of tasks before/after the Xamarin Android build  
         NOTE: The Property $(ApplicationResolveReferencesDependsOn) is used as a list of tasks in
		 C:\Program Files (x86)\MSBuild\Xamarin\Android\Xamarin.Android.Common.targets -->

  <Target Name="FuseeBeforeAndroidResRef">
  </Target>

  <!--  ANDROID-ONLY: Task looking for any contents in "Assets" subfolders below folders of all referenced managed .dlls (no matter if 
	        project or assembly references.
	        This target depends on two things:
			1. the $(MonoAndroidAssetsDirIntermediate) PROPERTY to contain the intermediate asset folder where the
			   Android-Build's APK-Zipper tasks takes all asset files from when running the "Install" target (msbuild -t:/Install)
			   This property is set during the build within C:\Program Files (x86)\MSBuild\Xamarin\Android\Xamarin.Android.Common.targets.
			   Just in case this property will disappear in future versions of the Android build - it is set like this:
			   <MonoAndroidAssetsDirIntermediate>$(IntermediateOutputPath)assets\</MonoAndroidAssetsDirIntermediate>
			2. The @(ReferencePath) ITEM LIST to contain all referenced managed dlls as items. This item list is generated during
			   all C# builds (and also Android builds).
	-->
  <Target Name="FuseeAfterAndroidResRef">
    <Warning Condition=" '$(MonoAndroidAssetsDirIntermediate)' == '' " Text="FuseeBuildActions: MonoAndroidAssetsDirIntermediate not set. Assets depending on project $(MSBuildProjectFile) will most likely not be added to the APK."/>
    <ItemGroup>
      <FuseeReferencedAssemblies Include="@(ReferencePath)" />
    </ItemGroup>
    <ItemGroup>
      <FUSEE_AndroidAsset Include="%(ReferencePath.RootDir)%(ReferencePath.Directory)Assets\*.*"/>
      <FuseeExtAssets Include="%(FuseeReferencedAssemblies.RootDir)%(FuseeReferencedAssemblies.Directory)%(FuseeReferencedAssemblies.Filename).Assets\*.*"/>
    </ItemGroup>
    <Message Importance="High" Text="[external android asset] %(FUSEE_AndroidAsset.RootDir)%(FUSEE_AndroidAsset.Directory)%(FUSEE_AndroidAsset.Filename)%(FUSEE_AndroidAsset.Extension) --> $(MonoAndroidAssetsDirIntermediate)" />
    <Message Importance="High" Text="[external android asset] %(FuseeExtAssets.RootDir)%(FuseeExtAssets.Directory)%(FuseeExtAssets.Filename)%(FuseeExtAssets.Extension) --> $(MonoAndroidAssetsDirIntermediate)" />
    <Copy	SourceFiles="@(FUSEE_AndroidAsset)" DestinationFolder="$(MonoAndroidAssetsDirIntermediate)" />
    <Copy	SourceFiles="@(FuseeExtAssets)" DestinationFolder="$(MonoAndroidAssetsDirIntermediate)" />
  </Target>

  <!-- ################################################################
	               TASKS TO PERFORM AT CLEAN 
	     ################################################################ 	-->
  <Target Name="FuseeCleanNativeDependencies">
    <Message Condition="Exists('$(FuseeBuildRoot)\bin\$(Configuration)\Libraries\%(ProjectReference.Filename).Natives')" Text="Removing native dependencies for %(ProjectReference.Filename)%(ProjectReference.Extension)." />
    <ItemGroup>
      <FuseeUnmanagedDependency Include="$(FuseeBuildRoot)\bin\$(Configuration)\Libraries\%(ProjectReference.Filename).Natives\*.*"/>
    </ItemGroup>
    <Message Condition="Exists('%(FuseeUnmanagedDependency.FullPath)')" Importance="High" Text="[native dependency] removed $(OutputPath)%(FuseeUnmanagedDependency.Filename)%(FuseeUnmanagedDependency.Extension)" />
    <Delete Files="$(OutputPath)%(FuseeUnmanagedDependency.Filename)%(FuseeUnmanagedDependency.Extension)"/>
    <!-- Delete Files="@(FuseeUnmanagedDependency)"/ -->
  </Target>

  <Target Name="FuseeCleanNativeLibrary">
    <!-- NOTE: Importance not High(!) output only in verbose msbuild -->
    <Message Text="[native library] Deleting $(OutputPath)$(AssemblyName).Natives\ and all of its contents" />
    <RemoveDir Directories="$(OutputPath)$(AssemblyName).Natives\" />
  </Target>

  <Target Name="FuseeCleanAssets">
    <Message Condition="Exists($(AssetDestinationFolder))" Importance="High"  Text="[$(AssemblyName)][Deleting assets:] $(AssetDestinationFolder) and all of its contents" />
    <RemoveDir Directories="$(AssetDestinationFolder)" />
  </Target>

  <!-- since we cannot specify in- and out-lists generated by JSIL, all we can do here is delete the entire Scripts folder (which renders FuseeCleanDependingJavaScript somewhat unnecessary -->
  <Target Name="FuseeJSILClean"  Condition=" '$(FuseeWebOutputPath)' != '' ">
    <Message Importance="High" Text="[JSILc x-compile] removed $(FuseeWebOutputPath)\Assets\Scripts\ and all of its contents" />
    <RemoveDir Directories="$(FuseeWebOutputPath)\Assets\Scripts\" />
  </Target>

  <Target Name="FuseeCleanDependingJavaScript"  Condition=" '$(FuseeWebOutputPath)' != '' ">
    <Message Condition="Exists('$(FuseeBuildRoot)\bin\$(Configuration)\Libraries\%(ProjectReference.Filename).Scripts')" Text="Removing external JavaScript dependencies for %(ProjectReference.Filename)%(ProjectReference.Extension)." />
    <ItemGroup>
      <FuseeExternalScript Include="$(FuseeBuildRoot)\bin\$(Configuration)\Libraries\%(ProjectReference.Filename).Scripts\*.*"/>
    </ItemGroup>
    <Message Condition="Exists('%(FuseeExternalScript.FullPath)')" Importance="High" Text="[external JavaScript dependency] removed $(FuseeWebOutputPath)Assets\Scripts\%(FuseeExternalScript.Filename)%(FuseeExternalScript.Extension)" />
    <Delete Files="$(FuseeWebOutputPath)Assets\Scripts\%(FuseeExternalScript.Filename)%(FuseeExternalScript.Extension)" />
  </Target>

  <Target Name="FuseeCleanExternalJavaScript">
    <!-- NOTE: Importance not High(!) output only in verbose msbuild -->
    <Message Text="[external JavaScript] Deleting $(OutputPath)$(AssemblyName).Scripts\ and all of its contents" />
    <RemoveDir Directories="$(OutputPath)$(AssemblyName).Scripts\" />
  </Target>
</Project>